[project]
name = "scheduling-agent-bedrock"
version = "0.1.0"
description = "AI Scheduling Agent - Multi-Agent System with AWS Bedrock Phase 1"
authors = [
    {name = "ProjectsForce Team"}
]
requires-python = ">=3.11"
readme = "README.md"

dependencies = [
    # Web Framework
    "fastapi>=0.115.0",
    "uvicorn[standard]>=0.32.0",
    "python-multipart>=0.0.17",

    # AI/Agent Framework
    "langgraph>=0.3.0",
    "langchain>=0.3.0",
    "langchain-core>=0.3.0",
    "langchain-aws>=0.2.0",
    "langchain-community>=0.3.0",

    # AWS SDK
    "boto3>=1.35.0",
    "aioboto3>=13.0.0",

    # Database
    "sqlalchemy[asyncio]>=2.0.36",
    "alembic>=1.14.0",
    "asyncpg>=0.30.0",

    # Cache & State Management
    "redis[hiredis]>=5.2.0",

    # HTTP Client
    "httpx>=0.28.0",

    # Data Validation
    "pydantic>=2.10.0",
    "pydantic-settings>=2.6.0",

    # Utilities
    "tenacity>=9.0.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",

    # Logging
    "structlog>=24.4.0",
    "python-json-logger>=3.2.0",
]

[dependency-groups]
dev = [
    # Testing
    "pytest>=8.3.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    "pytest-env>=1.1.0",

    # HTTP Mocking (using respx - compatible with Python 3.11)
    "respx>=0.21.0",

    # Test Data
    "faker>=33.1.0",

    # Load Testing
    "locust>=2.32.0",
    "pyzmq>=26.2.0",
    "gevent>=24.11.1",

    # Code Quality
    "ruff>=0.8.0",
    "mypy>=1.13.0",

    # Development Tools
    "ipython>=8.30.0",
    "ipdb>=0.13.13",
]

test = [
    "pytest>=8.3.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    "respx>=0.21.0",
    "faker>=33.1.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=app",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--asyncio-mode=auto",
    "-v",
    "-s",
]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.pytest-env]
ENVIRONMENT = "test"
DATABASE_URL = "postgresql+asyncpg://test:test@localhost:5432/test_scheduling_agent"
REDIS_URL = "redis://localhost:6379/1"

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

[tool.ruff]
line-length = 100
target-version = "py311"
exclude = [
    ".git",
    ".venv",
    "venv",
    "__pycache__",
    "alembic/versions",
    "build",
    "dist",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # function calls in argument defaults
    "UP007", # use X | Y for union types (pydantic compat)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "F403"]
"tests/**/*.py" = ["S101", "S105", "S106"]

[tool.ruff.lint.isort]
known-first-party = ["app"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "boto3.*",
    "aioboto3.*",
    "langgraph.*",
    "langchain.*",
    "langchain_core.*",
    "langchain_aws.*",
    "langchain_community.*",
    "structlog.*",
    "tenacity.*",
    "redis.*",
]
ignore_missing_imports = true

[tool.hatch.build.targets.wheel]
packages = ["app"]
